//--------------------------------------
//--- 010 Editor v3.1.3 Binary Template
//
// File: dar.bt
// Author: Mike
// Purpose: Label breach .dar archive files
// Notes: Current data length hardcoded for debug.dar
//--------------------------------------
struct STRING {
    int len;
    char s[len];
};

struct ARCHIVE {
    struct HEADER {
        char magic[4];
        int version;
        int directory_offset <format=hex>;
        int data_offset_relative <format=hex>;
        int data_offset <format=hex>;
        unsigned int file_length <format=hex>;
    } header;

    local int total_file_count = 0;

    FSeek(header.directory_offset);
    struct DIRECTORY_HEADER {
        int directory_count;
        struct DIRECTORY {
            STRING directory_name;
            int file_count;
            struct ENTRY {
                STRING file_name;
                uint hash;
                int pad;
                int data_offset_relative <format=hex>; // relative to start of data
                int length <format=hex>;
                int descriptor_count;
                struct DESCRIPTOR {
                    STRING group_name;
                    STRING file_name;
                } descriptors[descriptor_count];
                total_file_count++;
            } entries[file_count] <optimize=false>;
        } directories[directory_count] <optimize=false>;
    } directory_header;

    FSeek(header.data_offset);
    int offset <format=hex>;
    FSeek(header.data_offset);
    struct DATA {
        struct FILE {
            int length;
            char data[length];
        } file[total_file_count] <optimize=false>;
    } data;
} archive;