//--------------------------------------
//--- 010 Editor v3.1.3 Binary Template
//
// File: rgp.bt
// Author: Mike
// Edited by: Orpheus
// Purpose: Label Breach .rgp files
//--------------------------------------
typedef struct {
    int len;
    if (len != -1) {
        char s[len];
    }
} STRING <read=readbreachstring>;

string readbreachstring(STRING &bs) {
    return bs.s;
}

struct FILE {
    struct HEADER {
        int file_length;
        float pad;
        STRING type;
        STRING name;
        FSkip(5); // *shrug*
        int count;
    } header;
    local int i, ptr, temp;
    for (i = 0; i < header.count; i++) {
        struct BLOCK {
            struct BLOCKHEADER {
                int pad;
                STRING s;
                int pad;
                ptr = FTell();
                int size;
                float pad;
                STRING sub;
                STRING item;
            } header;
            int pad;
            if (pad) {
                temp = ptr;
                FSkip(pad - 4);
                struct BLOCKHEADER x;
                ptr = temp;
                FSeek(temp+8); 
                STRING sub;
                STRING item;
                FSkip(69);
                STRING PhysX;
                int pad;
                int size;
                int pad;
                STRING PhysSub;
                int pad;
                if (pad != -1) { 
                    FSeek(pad-4);                    
                    STRING item;
                    FSkip(size -PhysSub.len -item[1].len);
                } else {
                    FSkip(size -3 -PhysSub.len);
                }
                STRING Renderable;
                int pad;
                int size;
                int pad;
                STRING RendSub;
                int pad; int size;
                STRING Geometry;
                int pad; int size; int pad;
                STRING GeoSub;
                int pad;
                FSkip(24); //geodata
                int pad;
                STRING VertexBuffer;
                int pad; int size; int pad;
                STRING VertBuffSub;
                int pad;
            }
        } block <optimize=false, read=readblock>;
        FSeek(ptr + block.header.size);
    }
} file;

string readblock(BLOCK &b) {
    string ret;
    int i;
    SPrintf(ret, "%10s ", b.header.s.s);
/* for (i = 0; i < 10; i++) {
        SPrintf(ret, "%s %10d", ret, b.pad[i]);
    }*/
    return ret;
}