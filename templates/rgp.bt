//--------------------------------------
//--- 010 Editor v3.1.3 Binary Template
//
// File: rgp.bt
// Author: Mike
// Purpose: Label Breach .rgp files
//--------------------------------------
typedef struct {
    int len;
    if (len != -1) {
        char s[len];
    }
} STRING <read=readbreachstring>;

string readbreachstring(STRING &bs) {
    return bs.s;
}

typedef struct {
    // There must be a nicer way to do this :|
    byte flag : 1;
    byte flag : 1;
    byte flag : 1;
    byte flag : 1;
    byte flag : 1;
    byte flag : 1;
    byte flag : 1;
    byte flag : 1;
    byte flag : 1;
    byte flag : 1;
    byte flag : 1;
    byte flag : 1;
    byte flag : 1;
    byte flag : 1;
    byte flag : 1;
    byte flag : 1;
    byte flag : 1;
    byte flag : 1;
    byte flag : 1;
    byte flag : 1;
    byte flag : 1;
    byte flag : 1;
    byte flag : 1;
    byte flag : 1;
    byte flag : 1;
    byte flag : 1;
    byte flag : 1;
    byte flag : 1;
    byte flag : 1;
    byte flag : 1;
    byte flag : 1;
    byte flag : 1;
} FLAGS <read=readflags>;

string readflags(FLAGS &f) {
    local int i;
    local string ret = "";
    for (i = 0; i < 32; i++) {
        SPrintf(ret, "%d%s", f.flag[i], ret); // Note: reversed order!
    }
    return ret;
}

struct FILE {
    struct HEADER {
        int file_length;
        struct FLAGS flags;
        STRING type;
        STRING name;
        FSkip(5); // *shrug*
        int count; // maybe?
        int pad;
    } header;
    struct BLOCK {
        STRING s;
        int pad;
        int pad;
        struct FLAGS flags;
        STRING type;
        STRING name;
        int pad;
        int pad;
    } block;
} file;
